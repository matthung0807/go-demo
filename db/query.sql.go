// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getAll = `-- name: GetAll :many
SELECT id, name, age, created_on FROM employee
`

func (q *Queries) GetAll(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getById = `-- name: GetById :one
SELECT id, name, age, created_on FROM employee
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id int64) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getById, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.CreatedOn,
	)
	return i, err
}

const insert = `-- name: Insert :exec
INSERT INTO employee (name, age, created_on) 
VALUES ($1, $2, $3)
`

type InsertParams struct {
	Name      string
	Age       sql.NullInt32
	CreatedOn time.Time
}

func (q *Queries) Insert(ctx context.Context, arg InsertParams) error {
	_, err := q.db.ExecContext(ctx, insert, arg.Name, arg.Age, arg.CreatedOn)
	return err
}

const update = `-- name: Update :execrows
Update employee
SET
    name = $1,
    age = $2
WHERE
    id = $3
`

type UpdateParams struct {
	Name string
	Age  sql.NullInt32
	ID   int64
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, update, arg.Name, arg.Age, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
